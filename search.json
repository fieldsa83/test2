[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "NASDAQ Weekly % Change Relative to Start of Year\n\n\n#| echo: false\n#| warning: false\n#| message: false\n\n# Load necessary libraries\nlibrary(quantmod)\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: TTR\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(dplyr)\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(plotly)\n\nLoading required package: ggplot2\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Function to calculate weekly returns indexed to start of year\ncalculate_weekly_returns &lt;- function(symbol, start_date, end_date) {\n  data &lt;- getSymbols(symbol, from = start_date, to = end_date, src = \"yahoo\", auto.assign = FALSE)\n  prices &lt;- Ad(data)\n  \n  df &lt;- data.frame(date = index(prices), price = as.numeric(prices))\n  df &lt;- df %&gt;%\n    mutate(year = year(date),\n           week = week(date)) %&gt;%\n    group_by(year, week) %&gt;%\n    summarise(date = last(date), price = last(price), .groups = 'drop') %&gt;%\n    arrange(date)\n  \n  df &lt;- df %&gt;%\n    group_by(year) %&gt;%\n    mutate(pct_change = (price / first(price) - 1) * 100) %&gt;%\n    filter(week &lt;= 52) %&gt;%\n    ungroup()\n  \n  return(df)\n}\n\n# Set date range\nend_date &lt;- Sys.Date()\nstart_date &lt;- as.Date(\"2008-01-01\")\nstart_year &lt;- as.integer(format(start_date, \"%Y\"))\n\n# Calculate weekly returns for NASDAQ - MAKE SURE THIS IS EXECUTED\nnasdaq_returns &lt;- calculate_weekly_returns(\"^IXIC\", start_date, end_date)\n\n# Split data into dataframes\ndf_historical &lt;- nasdaq_returns %&gt;% filter(year &gt;= start_year & year &lt;= 2024)\ndf_2025 &lt;- nasdaq_returns %&gt;% filter(year == 2025)\ndf_avg_historical &lt;- df_historical %&gt;%\n  group_by(week) %&gt;%\n  summarise(avg_pct_change = mean(pct_change, na.rm = TRUE))\n\n# Create the plot\np &lt;- plot_ly()\n\n# Add traces for historical data\np &lt;- add_trace(p, x = ~week, y = ~pct_change, data = df_historical,\n             type = 'scatter', mode = 'lines', split = ~year,\n             line = list(color = 'grey', width = 1),\n             opacity = 0.3,\n             hoverinfo = \"text\",\n             text = ~paste(\"Year:\", year, \"&lt;br&gt;Week:\", week, \"&lt;br&gt;Change:\", round(pct_change, 2), \"%\"),\n             showlegend = FALSE)\n\n# Add a custom trace for the historical legend entry\np &lt;- add_trace(p, x = c(1), y = c(NA), type = 'scatter', mode = 'lines',\n             line = list(color = 'grey', width = 1),\n             opacity = 0.3,\n             name = '',\n             hoverinfo = 'none')\n\n# Add trace for 2025\nif(nrow(df_2025) &gt; 0) {\n  p &lt;- add_trace(p, x = ~week, y = ~pct_change, data = df_2025,\n               type = 'scatter', mode = 'lines',\n               line = list(color = '#336699', width = 2),\n               name = '2025',\n               hoverinfo = \"text\",\n               text = ~paste(\"Year: 2025&lt;br&gt;Week:\", week, \"&lt;br&gt;Change:\", round(pct_change, 2), \"%\"))\n}\n\n# Add trace for average of historical data\np &lt;- add_trace(p, x = ~week, y = ~avg_pct_change, data = df_avg_historical,\n             type = 'scatter', mode = 'lines',\n             opacity = 1,\n             line = list(color = 'darkred', width = 2, dash = 'dot'),\n             name = paste0(\"Average (\",start_year,\"-2024)\"),\n             hoverinfo = \"text\",\n             text = ~paste0(\"Year: Average (\",start_year,\"-2024)&lt;br&gt;Week:\", week, \"&lt;br&gt;Change:\", round(avg_pct_change, 2), \"%\"))\n\n# Update layout\np &lt;- p %&gt;% layout(\n  xaxis = list(\n    title = \"Week\", \n    range = c(1, 52),\n    showgrid = FALSE,\n    tickmode = \"array\",\n    tickvals = c(1, 10, 20, 30, 40, 50),\n    ticktext = c(\"1\", \"10\", \"20\", \"30\", \"40\", \"50\")\n  ),\n  yaxis = list(title = \"% Change\"),\n  showlegend = TRUE,\n  legend = list(orientation = \"h\", y = 1.1),\n  hovermode = \"closest\"\n) %&gt;%\nconfig(\n  displayModeBar = FALSE\n)\n\n# Add the highlight effect\np &lt;- p %&gt;% \n  highlight(\n    on = \"plotly_hover\",\n    off = \"plotly_doubleclick\",  # Changed from \"plotly_unhover\" to a valid option\n    selected = list(line = list(color = \"black\", width = 3)),\n    opacityDim = 0.2\n  )\n\n# Display the plot\np"
  }
]