::: {style="font-size: 14pt;font-weight: bold;margin-bottom: 10px; margin-top: 20px"}
NASDAQ Weekly % Change Relative to Start of Year
:::


```{r}
#| echo: false
#| warning: false
#| message: false

# Load the necessary libraries
library(quantmod)
library(dplyr)
library(plotly)
library(scales) 

# Define the current year for dynamic filtering
current_year <- 2025

# 1. Get NASDAQ data starting from 2008
df_hist_xts <- getSymbols("^IXIC", 
                          from = "2008-01-01", 
                          to = "2025-12-31",
                          src = "yahoo", 
                          auto.assign = FALSE)

# 2. Get the last trading day of each week
weekly_endpoints <- endpoints(df_hist_xts, on = "weeks")
last_day_of_week <- df_hist_xts[weekly_endpoints, ]

# 3. Convert to a data.frame and add date columns
df_with_dates <- data.frame(Date = index(last_day_of_week), 
                            coredata(last_day_of_week)) %>%
  mutate(
    Year  = as.numeric(format(Date, "%Y")),
    Month = as.numeric(format(Date, "%m")),
    Week  = as.numeric(format(Date, "%V"))
  )

# 4. Group by year and calculate the change using backticks
df_hist <- df_with_dates %>%
  arrange(Year, Week) %>%
  group_by(Year) %>%
  mutate(
    change_from_year_start = ((`IXIC.Adjusted` / first(`IXIC.Adjusted`)) - 1)*100
  ) %>%
  ungroup()

# 5. Prepare the data for plotting
df_historical_plain <- df_hist %>% filter(Year < current_year, Week <= 52)
df_current_year <- df_hist %>% filter(Year == current_year)

df_avg_historical <- df_historical_plain %>%
  group_by(Week) %>%
  summarise(avg_change = mean(change_from_year_start, na.rm = TRUE))

# --- 6. Create the plot ---
p <- plot_ly()

# Add traces for all historical years
p <- add_trace(p, 
               data = df_historical_plain, # Using the plain data frame now
               x = ~Week, 
               y = ~change_from_year_start,
               type = 'scatter', 
               mode = 'lines', 
               split = ~Year, 
               line = list(color = 'grey', width = 1),
               opacity = 0.3,
               hoverinfo = "text",
               text = ~paste(
                 "Year:", Year, 
                 "<br>Week:", Week, 
                 "<br>Change:", round(change_from_year_start, 1),"%"
               ),
               showlegend = FALSE
)

# Add trace for the current year
if(nrow(df_current_year) > 0) {
  p <- add_trace(p, 
                 data = df_current_year,
                 x = ~Week, 
                 y = ~change_from_year_start,
                 type = 'scatter', 
                 mode = 'lines',
                 line = list(color = '#336699', width = 2),
                 name = as.character(current_year),
                 hoverinfo = "text",
                 text = ~paste(
                   "Year:", Year,
                   "<br>Week:", Week, 
                   "<br>Change:", round(change_from_year_start, 1),"%"
                 )
  )
}

# Add trace for the historical average
p <- add_trace(p, 
               data = df_avg_historical,
               x = ~Week, 
               y = ~avg_change,
               type = 'scatter', 
               mode = 'lines',
               line = list(color = 'darkred', width = 2, dash = 'dot'),
               name = paste0("Average (", min(df_historical_plain$Year), "-", max(df_historical_plain$Year), ")"),
               hoverinfo = "text",
               text = ~paste(
                 "Year: Average",
                 "<br>Week:", Week, 
                 "<br>Change:", round(avg_change, 1),"%"
               )
)



# 7. Apply layout and configuration
p <- p %>% layout(
  #title = "NASDAQ Weekly Performance Since Start of Year",
  xaxis = list(
    title = "Week",
    range = c(0.5, 53),
    showgrid = FALSE,
    tickmode = "array",
    tickvals = c(1, 10, 20, 30, 40, 50),
    ticktext = c("1", "10", "20", "30", "40", "50")
  ),
  yaxis = list(
    title = "% Change",
    #tickformat = ".0%", 
    showgrid = TRUE,
    gridcolor = "#e5e5e5"
  ),
  showlegend = TRUE,
  legend = list(orientation = "h", y = 1.1),
  hovermode = "closest",
  plot_bgcolor = "white"
) %>%
  config(
    displayModeBar = FALSE 
  )
# REMOVED: The highlight() pipe was causing the performance issues.

# Display the final plot
p



```
